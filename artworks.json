{
  "meta": {
    "version": "1.0",
    "total": 6,
    "generated": "2025-01-28T12:00:00Z",
    "description": "ZEN Art Portfolio 作品集 - 禅的美学とデジタル技術の融合",
    "author": "Tatsya Minegishi",
    "contact": "@THE.STILL.BECOMING"
  },
  "categories": {
    "zen": "禅的作品",
    "technical": "技術実験",
    "interactive": "インタラクティブ",
    "generative": "ジェネラティブ"
  },
  "artworks": [
    {
      "id": "zen-garden-meditation",
      "title": "静寂の庭",
      "subtitle": "Interactive Zen Garden",
      "description": "マウスの動きで砂紋を描く、インタラクティブな枯山水庭園。静寂の中に生まれる美しい砂のパターンで心を整える瞑想体験を提供します。",
      "media": {
        "thumbnail": {
          "url": "https://placehold.co/600x400/f8f8f0/2d2d2d?text=Zen+Garden+Meditation",
          "alt": "静寂の庭"
        },
        "animation": {
          "type": "zen-garden",
          "desktop_only": true
        }
      },
      "prompt": {
        "midjourney": "zen garden with flowing sand patterns, minimalist Japanese rock garden, peaceful meditation space, soft natural lighting, beige and white color palette, top-down view, clean composition --ar 16:9 --style raw",
        "description": "枯山水庭園の美しい砂紋パターンを表現。自然光と最小限の色彩で静寂感を演出。"
      },
      "code": {
        "language": "javascript",
        "content": "const canvas = document.getElementById('zenCanvas');\nconst ctx = canvas.getContext('2d');\nlet particles = [];\n\nclass SandParticle {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    this.life = 1.0;\n    this.decay = 0.005;\n  }\n\n  update() {\n    this.life -= this.decay;\n    return this.life > 0;\n  }\n\n  draw() {\n    ctx.globalAlpha = this.life;\n    ctx.fillStyle = '#d4b896';\n    ctx.fillRect(this.x, this.y, 2, 2);\n  }\n}\n\ncanvas.addEventListener('mousemove', (e) => {\n  const rect = canvas.getBoundingClientRect();\n  const x = e.clientX - rect.left;\n  const y = e.clientY - rect.top;\n  \n  for(let i = 0; i < 5; i++) {\n    particles.push(new SandParticle(\n      x + Math.random() * 10 - 5,\n      y + Math.random() * 10 - 5\n    ));\n  }\n});\n\nfunction animate() {\n  ctx.fillStyle = 'rgba(248, 248, 240, 0.1)';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  \n  particles = particles.filter(particle => {\n    particle.draw();\n    return particle.update();\n  });\n  \n  requestAnimationFrame(animate);\n}\n\nanimate();"
      },
      "tech": ["Canvas", "JavaScript", "Mouse Interaction"],
      "category": "interactive",
      "featured": true,
      "created": "2025-01-28",
      "tags": ["meditation", "zen-garden", "interactive", "minimalism"]
    },
    {
      "id": "mandala-breathing",
      "title": "呼吸曼荼羅",
      "subtitle": "Breathing Mandala Meditation",
      "description": "呼吸のリズムに合わせて変化する神聖幾何学模様。4-7-8呼吸法に基づいた瞑想支援ツールとして、心身の調和を促進します。",
      "media": {
        "thumbnail": {
          "url": "https://placehold.co/600x400/1a1a2e/eee2dc?text=Breathing+Mandala",
          "alt": "呼吸曼荼羅"
        },
        "animation": {
          "type": "mandala",
          "desktop_only": false
        }
      },
      "prompt": {
        "midjourney": "sacred geometry mandala, golden ratio spirals, breathing meditation visualization, deep blue and gold colors, symmetric patterns, mystical atmosphere, glowing center --ar 16:9 --style raw",
        "description": "神聖幾何学をベースとした呼吸瞑想の視覚化。黄金比と対称性を重視したデザイン。"
      },
      "code": {
        "language": "javascript",
        "content": "class BreathingMandala {\n  constructor(canvas) {\n    this.canvas = canvas;\n    this.ctx = canvas.getContext('2d');\n    this.centerX = canvas.width / 2;\n    this.centerY = canvas.height / 2;\n    this.time = 0;\n    this.breathCycle = 19000; // 4s in + 7s hold + 8s out\n  }\n\n  getBreathPhase() {\n    const phase = (this.time % this.breathCycle) / this.breathCycle;\n    if (phase < 0.21) return { name: 'inhale', progress: phase / 0.21 };\n    if (phase < 0.58) return { name: 'hold', progress: (phase - 0.21) / 0.37 };\n    return { name: 'exhale', progress: (phase - 0.58) / 0.42 };\n  }\n\n  drawMandala() {\n    const breath = this.getBreathPhase();\n    const scale = breath.name === 'inhale' ? \n      1 + breath.progress * 0.3 : \n      breath.name === 'exhale' ? \n        1.3 - breath.progress * 0.3 : 1.3;\n\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    \n    for (let i = 0; i < 12; i++) {\n      const angle = (i * Math.PI * 2) / 12;\n      const x = this.centerX + Math.cos(angle) * 100 * scale;\n      const y = this.centerY + Math.sin(angle) * 100 * scale;\n      \n      this.ctx.beginPath();\n      this.ctx.arc(x, y, 20 * scale, 0, Math.PI * 2);\n      this.ctx.fillStyle = `hsl(${200 + i * 10}, 70%, ${50 + breath.progress * 20}%)`;\n      this.ctx.fill();\n    }\n  }\n\n  animate() {\n    this.time += 16;\n    this.drawMandala();\n    requestAnimationFrame(() => this.animate());\n  }\n}\n\nconst mandala = new BreathingMandala(document.getElementById('mandalaCanvas'));\nmandala.animate();"
      },
      "tech": ["Canvas", "JavaScript", "Sacred Geometry"],
      "category": "zen",
      "featured": true,
      "created": "2025-01-28",
      "tags": ["meditation", "breathing", "mandala", "sacred-geometry"]
    },
    {
      "id": "sumi-ink-flow",
      "title": "墨流れ",
      "subtitle": "Digital Sumi-e Brush",
      "description": "デジタル技術で再現した墨絵の筆致。筆圧と速度に応じて変化する墨の濃淡で、現代的な水墨画体験を提供します。",
      "media": {
        "thumbnail": {
          "url": "https://placehold.co/600x400/ffffff/000000?text=Sumi+Ink+Flow",
          "alt": "墨流れ"
        },
        "animation": {
          "type": "ink",
          "desktop_only": true
        }
      },
      "prompt": {
        "midjourney": "traditional sumi-e ink painting, flowing black ink on white paper, bamboo and mountain silhouettes, minimal brushstrokes, zen aesthetic, traditional Japanese art style --ar 16:9 --style raw",
        "description": "伝統的な水墨画の美学をデジタルで表現。墨の流れと余白の美しさを重視。"
      },
      "code": {
        "language": "javascript",
        "content": "class SumieBrush {\n  constructor(canvas) {\n    this.canvas = canvas;\n    this.ctx = canvas.getContext('2d');\n    this.isDrawing = false;\n    this.lastX = 0;\n    this.lastY = 0;\n    this.pressure = 0;\n    \n    this.setupEvents();\n  }\n\n  setupEvents() {\n    this.canvas.addEventListener('mousedown', (e) => {\n      this.isDrawing = true;\n      this.lastX = e.offsetX;\n      this.lastY = e.offsetY;\n    });\n\n    this.canvas.addEventListener('mousemove', (e) => {\n      if (!this.isDrawing) return;\n      \n      const currentX = e.offsetX;\n      const currentY = e.offsetY;\n      const distance = Math.sqrt(\n        Math.pow(currentX - this.lastX, 2) + \n        Math.pow(currentY - this.lastY, 2)\n      );\n      \n      const speed = distance / 16;\n      this.pressure = Math.max(0.1, 1 - speed * 0.1);\n      \n      this.drawStroke(this.lastX, this.lastY, currentX, currentY);\n      \n      this.lastX = currentX;\n      this.lastY = currentY;\n    });\n\n    this.canvas.addEventListener('mouseup', () => {\n      this.isDrawing = false;\n    });\n  }\n\n  drawStroke(x1, y1, x2, y2) {\n    this.ctx.globalCompositeOperation = 'source-over';\n    this.ctx.strokeStyle = `rgba(0, 0, 0, ${this.pressure})`;\n    this.ctx.lineWidth = this.pressure * 20;\n    this.ctx.lineCap = 'round';\n    this.ctx.lineJoin = 'round';\n    \n    this.ctx.beginPath();\n    this.ctx.moveTo(x1, y1);\n    this.ctx.lineTo(x2, y2);\n    this.ctx.stroke();\n    \n    // Add ink bleeding effect\n    const gradient = this.ctx.createRadialGradient(x2, y2, 0, x2, y2, this.pressure * 10);\n    gradient.addColorStop(0, `rgba(0, 0, 0, ${this.pressure * 0.3})`);\n    gradient.addColorStop(1, 'rgba(0, 0, 0, 0)');\n    \n    this.ctx.fillStyle = gradient;\n    this.ctx.beginPath();\n    this.ctx.arc(x2, y2, this.pressure * 10, 0, Math.PI * 2);\n    this.ctx.fill();\n  }\n}\n\nconst brush = new SumieBrush(document.getElementById('sumiCanvas'));"
      },
      "tech": ["Canvas", "JavaScript", "Mouse Events", "Digital Art"],
      "category": "interactive",
      "featured": false,
      "created": "2025-01-28",
      "tags": ["sumi-e", "brush", "ink", "traditional"]
    },
    {
      "id": "sakura-particles",
      "title": "桜散華",
      "subtitle": "Falling Cherry Blossoms",
      "description": "風に舞う桜の花びらをパーティクルシステムで表現。季節の移ろいと無常観を美しく描写した、日本の美意識を体現する作品です。",
      "media": {
        "thumbnail": {
          "url": "https://placehold.co/600x400/fef7f0/ff69b4?text=Sakura+Particles",
          "alt": "桜散華"
        },
        "animation": {
          "type": "sakura",
          "desktop_only": false
        }
      },
      "prompt": {
        "midjourney": "cherry blossom petals falling like snow, soft pink and white petals, gentle spring breeze, peaceful Japanese garden background, soft pastel colors, dreamy atmosphere --ar 16:9 --style raw",
        "description": "桜の花びらが舞い散る春の情景。パステルカラーで儚い美しさを表現。"
      },
      "code": {
        "language": "javascript",
        "content": "class SakuraPetal {\n  constructor(canvas) {\n    this.x = Math.random() * canvas.width;\n    this.y = -10;\n    this.vx = (Math.random() - 0.5) * 2;\n    this.vy = Math.random() * 2 + 1;\n    this.rotation = Math.random() * Math.PI * 2;\n    this.rotationSpeed = (Math.random() - 0.5) * 0.02;\n    this.size = Math.random() * 8 + 4;\n    this.opacity = Math.random() * 0.8 + 0.2;\n    this.wind = 0;\n  }\n\n  update(time, wind) {\n    this.wind = wind;\n    this.x += this.vx + this.wind;\n    this.y += this.vy;\n    this.rotation += this.rotationSpeed;\n    \n    // Gentle swaying motion\n    this.vx += (Math.random() - 0.5) * 0.1;\n    this.vx *= 0.98;\n    \n    return this.y < canvas.height + 20;\n  }\n\n  draw(ctx) {\n    ctx.save();\n    ctx.translate(this.x, this.y);\n    ctx.rotate(this.rotation);\n    ctx.globalAlpha = this.opacity;\n    \n    // Draw petal shape\n    ctx.fillStyle = '#ffb7c5';\n    ctx.beginPath();\n    ctx.ellipse(0, 0, this.size, this.size * 0.6, 0, 0, Math.PI * 2);\n    ctx.fill();\n    \n    ctx.fillStyle = '#fff0f5';\n    ctx.beginPath();\n    ctx.ellipse(-this.size * 0.3, 0, this.size * 0.4, this.size * 0.3, 0, 0, Math.PI * 2);\n    ctx.fill();\n    \n    ctx.restore();\n  }\n}\n\nclass SakuraSystem {\n  constructor(canvas) {\n    this.canvas = canvas;\n    this.ctx = canvas.getContext('2d');\n    this.petals = [];\n    this.time = 0;\n    this.wind = 0;\n  }\n\n  addPetal() {\n    if (Math.random() < 0.3) {\n      this.petals.push(new SakuraPetal(this.canvas));\n    }\n  }\n\n  animate() {\n    this.time += 0.016;\n    this.wind = Math.sin(this.time * 0.5) * 0.5;\n    \n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    \n    this.addPetal();\n    \n    this.petals = this.petals.filter(petal => {\n      petal.draw(this.ctx);\n      return petal.update(this.time, this.wind);\n    });\n    \n    requestAnimationFrame(() => this.animate());\n  }\n}\n\nconst sakura = new SakuraSystem(document.getElementById('sakuraCanvas'));\nsakura.animate();"
      },
      "tech": ["Canvas", "JavaScript", "Particle System"],
      "category": "generative",
      "featured": true,
      "created": "2025-01-28",
      "tags": ["sakura", "particles", "nature", "seasonal"]
    },
    {
      "id": "moon-reflection",
      "title": "月影水鏡",
      "subtitle": "Moon Reflection on Water",
      "description": "静寂な水面に映る月の光を表現。波紋とライトリフレクションで、夜の静謐な美しさと禅的な瞑想空間を創造します。",
      "media": {
        "thumbnail": {
          "url": "https://placehold.co/600x400/0f1419/f0f8ff?text=Moon+Reflection",
          "alt": "月影水鏡"
        },
        "animation": {
          "type": "moonlight",
          "desktop_only": false
        }
      },
      "prompt": {
        "midjourney": "full moon reflection on calm water surface, gentle ripples, silver moonlight, dark blue night sky, peaceful lake scene, mystical atmosphere, soft light rays --ar 16:9 --style raw",
        "description": "静かな水面に映る満月。銀色の月光と青い夜空のコントラストが神秘的な雰囲気を演出。"
      },
      "code": {
        "language": "javascript",
        "content": "class WaterRipple {\n  constructor(x, y, time) {\n    this.x = x;\n    this.y = y;\n    this.startTime = time;\n    this.maxRadius = Math.random() * 50 + 30;\n    this.lifetime = 3000;\n  }\n\n  update(currentTime) {\n    const elapsed = currentTime - this.startTime;\n    this.radius = (elapsed / this.lifetime) * this.maxRadius;\n    this.opacity = 1 - (elapsed / this.lifetime);\n    return elapsed < this.lifetime;\n  }\n\n  draw(ctx) {\n    if (this.opacity <= 0) return;\n    \n    ctx.save();\n    ctx.globalAlpha = this.opacity * 0.3;\n    ctx.strokeStyle = '#87ceeb';\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);\n    ctx.stroke();\n    ctx.restore();\n  }\n}\n\nclass MoonReflection {\n  constructor(canvas) {\n    this.canvas = canvas;\n    this.ctx = canvas.getContext('2d');\n    this.ripples = [];\n    this.time = 0;\n    this.moonY = canvas.height * 0.3;\n    \n    canvas.addEventListener('click', (e) => {\n      const rect = canvas.getBoundingClientRect();\n      const x = e.clientX - rect.left;\n      const y = e.clientY - rect.top;\n      if (y > canvas.height * 0.5) {\n        this.ripples.push(new WaterRipple(x, y, this.time));\n      }\n    });\n  }\n\n  drawMoon() {\n    const moonX = this.canvas.width / 2;\n    \n    // Moon\n    const gradient = this.ctx.createRadialGradient(moonX, this.moonY, 0, moonX, this.moonY, 40);\n    gradient.addColorStop(0, '#ffffff');\n    gradient.addColorStop(0.7, '#f0f8ff');\n    gradient.addColorStop(1, 'rgba(240, 248, 255, 0)');\n    \n    this.ctx.fillStyle = gradient;\n    this.ctx.beginPath();\n    this.ctx.arc(moonX, this.moonY, 40, 0, Math.PI * 2);\n    this.ctx.fill();\n    \n    // Moon reflection\n    const reflectionY = this.canvas.height - this.moonY;\n    const waveOffset = Math.sin(this.time * 0.002) * 5;\n    \n    this.ctx.save();\n    this.ctx.globalAlpha = 0.6;\n    this.ctx.scale(1, -0.8);\n    this.ctx.translate(waveOffset, -this.canvas.height);\n    \n    this.ctx.fillStyle = gradient;\n    this.ctx.beginPath();\n    this.ctx.arc(moonX, this.moonY, 35, 0, Math.PI * 2);\n    this.ctx.fill();\n    this.ctx.restore();\n  }\n\n  animate() {\n    this.time += 16;\n    \n    // Clear with night sky gradient\n    const skyGradient = this.ctx.createLinearGradient(0, 0, 0, this.canvas.height);\n    skyGradient.addColorStop(0, '#0f1419');\n    skyGradient.addColorStop(0.5, '#1a2332');\n    skyGradient.addColorStop(1, '#2d3748');\n    \n    this.ctx.fillStyle = skyGradient;\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    \n    this.drawMoon();\n    \n    // Update and draw ripples\n    this.ripples = this.ripples.filter(ripple => {\n      ripple.draw(this.ctx);\n      return ripple.update(this.time);\n    });\n    \n    requestAnimationFrame(() => this.animate());\n  }\n}\n\nconst moonScene = new MoonReflection(document.getElementById('moonCanvas'));\nmoonScene.animate();"
      },
      "tech": ["Canvas", "JavaScript", "Click Interaction", "Gradients"],
      "category": "interactive",
      "featured": false,
      "created": "2025-01-28",
      "tags": ["moon", "water", "reflection", "night", "zen"]
    },
    {
      "id": "sacred-geometry-web",
      "title": "聖なる幾何学",
      "subtitle": "Sacred Geometry Web",
      "description": "黄金比とフィボナッチ数列に基づく神聖幾何学パターン。WebGLシェーダーで描画される複雑な幾何学模様が瞑想的な視覚体験を提供します。",
      "media": {
        "thumbnail": {
          "url": "https://placehold.co/600x400/1a0033/ffd700?text=Sacred+Geometry",
          "alt": "聖なる幾何学"
        },
        "animation": {
          "type": "geometry",
          "desktop_only": true
        }
      },
      "prompt": {
        "midjourney": "sacred geometry patterns, fibonacci spiral, golden ratio, intricate geometric mandala, purple and gold colors, mystical mathematical visualization, perfect symmetry --ar 16:9 --style raw",
        "description": "数学的美しさを持つ神聖幾何学。紫と金色で神秘性を表現し、完璧な対称性を重視。"
      },
      "code": {
        "language": "javascript",
        "content": "class SacredGeometry {\n  constructor(canvas) {\n    this.canvas = canvas;\n    this.ctx = canvas.getContext('2d');\n    this.centerX = canvas.width / 2;\n    this.centerY = canvas.height / 2;\n    this.time = 0;\n    this.phi = (1 + Math.sqrt(5)) / 2; // Golden ratio\n  }\n\n  fibonacciSpiral(n, scale, rotation) {\n    const points = [];\n    let a = 0, b = 1;\n    \n    for (let i = 0; i < n; i++) {\n      const angle = i * this.phi * 2 * Math.PI + rotation;\n      const radius = Math.sqrt(b) * scale;\n      \n      points.push({\n        x: this.centerX + Math.cos(angle) * radius,\n        y: this.centerY + Math.sin(angle) * radius\n      });\n      \n      [a, b] = [b, a + b];\n    }\n    \n    return points;\n  }\n\n  drawFlowerOfLife(radius, alpha) {\n    this.ctx.save();\n    this.ctx.globalAlpha = alpha;\n    this.ctx.strokeStyle = '#ffd700';\n    this.ctx.lineWidth = 2;\n    \n    // Central circle\n    this.ctx.beginPath();\n    this.ctx.arc(this.centerX, this.centerY, radius, 0, Math.PI * 2);\n    this.ctx.stroke();\n    \n    // Six surrounding circles\n    for (let i = 0; i < 6; i++) {\n      const angle = (i * Math.PI * 2) / 6;\n      const x = this.centerX + Math.cos(angle) * radius;\n      const y = this.centerY + Math.sin(angle) * radius;\n      \n      this.ctx.beginPath();\n      this.ctx.arc(x, y, radius, 0, Math.PI * 2);\n      this.ctx.stroke();\n    }\n    \n    this.ctx.restore();\n  }\n\n  drawSacredPattern() {\n    // Clear with dark background\n    this.ctx.fillStyle = '#1a0033';\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    \n    const rotation = this.time * 0.001;\n    \n    // Draw Fibonacci spirals\n    const spiralPoints = this.fibonacciSpiral(50, 3, rotation);\n    \n    this.ctx.strokeStyle = '#9966cc';\n    this.ctx.lineWidth = 1;\n    this.ctx.globalAlpha = 0.7;\n    \n    this.ctx.beginPath();\n    spiralPoints.forEach((point, i) => {\n      if (i === 0) {\n        this.ctx.moveTo(point.x, point.y);\n      } else {\n        this.ctx.lineTo(point.x, point.y);\n      }\n      \n      // Draw nodes\n      this.ctx.save();\n      this.ctx.fillStyle = '#ffd700';\n      this.ctx.globalAlpha = 0.8;\n      this.ctx.beginPath();\n      this.ctx.arc(point.x, point.y, 2, 0, Math.PI * 2);\n      this.ctx.fill();\n      this.ctx.restore();\n    });\n    this.ctx.stroke();\n    \n    // Draw Flower of Life pattern\n    for (let layer = 1; layer <= 3; layer++) {\n      const radius = 30 * layer;\n      const alpha = 0.3 + Math.sin(this.time * 0.002 + layer) * 0.2;\n      this.drawFlowerOfLife(radius, alpha);\n    }\n    \n    // Draw connecting lines based on golden ratio\n    this.ctx.strokeStyle = '#ff6b9d';\n    this.ctx.lineWidth = 1;\n    this.ctx.globalAlpha = 0.4;\n    \n    for (let i = 0; i < 8; i++) {\n      const angle1 = (i * Math.PI * 2) / 8 + rotation;\n      const angle2 = ((i + this.phi) * Math.PI * 2) / 8 + rotation;\n      \n      const x1 = this.centerX + Math.cos(angle1) * 120;\n      const y1 = this.centerY + Math.sin(angle1) * 120;\n      const x2 = this.centerX + Math.cos(angle2) * 120;\n      const y2 = this.centerY + Math.sin(angle2) * 120;\n      \n      this.ctx.beginPath();\n      this.ctx.moveTo(x1, y1);\n      this.ctx.lineTo(x2, y2);\n      this.ctx.stroke();\n    }\n  }\n\n  animate() {\n    this.time += 16;\n    this.drawSacredPattern();\n    requestAnimationFrame(() => this.animate());\n  }\n}\n\nconst geometry = new SacredGeometry(document.getElementById('geometryCanvas'));\ngeometry.animate();"
      },
      "tech": ["Canvas", "JavaScript", "Mathematical Art", "Golden Ratio"],
      "category": "generative",
      "featured": true,
      "created": "2025-01-28",
      "tags": ["sacred-geometry", "fibonacci", "golden-ratio", "mathematical"]
    }
  ]
}
